{"ast":null,"code":"import{atom,selector}from\"recoil\";var storedToDo=localStorage.getItem(\"storedToDo\");var loadedToDo=JSON.parse(storedToDo);export var categoryState=atom({key:\"category\",default:\"TODO\"});export var customCategoryState=atom({key:\"customCategory\",default:[{category:\"TODO\"},{category:\"DOING\"},{category:\"DONE\"}]});export var toDoState=atom({key:\"toDo\",default:loadedToDo||[]});export var toDoSelector=selector({key:\"toDoSelector\",get:function get(_ref){var _get=_ref.get;var toDos=_get(toDoState);var category=_get(categoryState);return toDos.filter(function(toDo){return toDo.category===category;});}});export var categorySelector=selector({key:\"categorySelector\",get:function get(_ref2){var _get2=_ref2.get;var ccsArr=_get2(customCategoryState);return ccsArr;}});","map":{"version":3,"sources":["/Users/leegihun/Documents/JS_Practice/ToDoList/src/atoms.ts"],"names":["atom","selector","storedToDo","localStorage","getItem","loadedToDo","JSON","parse","categoryState","key","default","customCategoryState","category","toDoState","toDoSelector","get","toDos","filter","toDo","categorySelector","ccsArr"],"mappings":"AAAA,OAASA,IAAT,CAAeC,QAAf,KAA+B,QAA/B,CAEA,GAAMC,CAAAA,UAAU,CAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAnB,CACA,GAAMC,CAAAA,UAAU,CAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAnB,CAmBA,MAAO,IAAMM,CAAAA,aAAa,CAAGR,IAAI,CAAS,CACxCS,GAAG,CAAE,UADmC,CAExCC,OAAO,CAAE,MAF+B,CAAT,CAA1B,CAKP,MAAO,IAAMC,CAAAA,mBAAmB,CAAGX,IAAI,CAAoB,CACzDS,GAAG,CAAE,gBADoD,CAEzDC,OAAO,CAAE,CAAC,CAAEE,QAAQ,CAAE,MAAZ,CAAD,CAAuB,CAAEA,QAAQ,CAAE,OAAZ,CAAvB,CAA8C,CAAEA,QAAQ,CAAE,MAAZ,CAA9C,CAFgD,CAApB,CAAhC,CAKP,MAAO,IAAMC,CAAAA,SAAS,CAAGb,IAAI,CAAU,CACrCS,GAAG,CAAE,MADgC,CAErCC,OAAO,CAAEL,UAAU,EAAI,EAFc,CAAV,CAAtB,CAKP,MAAO,IAAMS,CAAAA,YAAY,CAAGb,QAAQ,CAAC,CACnCQ,GAAG,CAAE,cAD8B,CAEnCM,GAAG,CAAE,kBAAa,IAAVA,CAAAA,IAAU,MAAVA,GAAU,CAChB,GAAMC,CAAAA,KAAK,CAAGD,IAAG,CAACF,SAAD,CAAjB,CACA,GAAMD,CAAAA,QAAQ,CAAGG,IAAG,CAACP,aAAD,CAApB,CACA,MAAOQ,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACN,QAAL,GAAkBA,QAA5B,EAAb,CAAP,CACD,CANkC,CAAD,CAA7B,CASP,MAAO,IAAMO,CAAAA,gBAAgB,CAAGlB,QAAQ,CAAC,CACvCQ,GAAG,CAAE,kBADkC,CAEvCM,GAAG,CAAE,mBAAa,IAAVA,CAAAA,KAAU,OAAVA,GAAU,CAChB,GAAMK,CAAAA,MAAM,CAAGL,KAAG,CAACJ,mBAAD,CAAlB,CACA,MAAOS,CAAAA,MAAP,CACD,CALsC,CAAD,CAAjC","sourcesContent":["import { atom, selector } from \"recoil\";\n\nconst storedToDo = localStorage.getItem(\"storedToDo\");\nconst loadedToDo = JSON.parse(storedToDo as string);\n\ninterface ICustomCategory {\n  category: string;\n}\n\n// type categories = \"DONE\" | \"DOING\" | \"TODO\";\n// export enum Categories {\n//   \"TODO\" = \"TODO\",\n//   \"DOING\" = \"DOING\",\n//   \"DONE\" = \"DONE\",\n// }\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\n\nexport const categoryState = atom<string>({\n  key: \"category\",\n  default: \"TODO\",\n});\n\nexport const customCategoryState = atom<ICustomCategory[]>({\n  key: \"customCategory\",\n  default: [{ category: \"TODO\" }, { category: \"DOING\" }, { category: \"DONE\" }],\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: loadedToDo || [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n\nexport const categorySelector = selector({\n  key: \"categorySelector\",\n  get: ({ get }) => {\n    const ccsArr = get(customCategoryState);\n    return ccsArr;\n  },\n});\n"]},"metadata":{},"sourceType":"module"}