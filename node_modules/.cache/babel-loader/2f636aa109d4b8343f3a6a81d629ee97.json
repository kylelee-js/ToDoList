{"ast":null,"code":"import { atom, selector } from \"recoil\";\nexport let Categories;\n\n(function (Categories) {\n  Categories[\"TODO\"] = \"TODO\";\n  Categories[\"DOING\"] = \"DOING\";\n  Categories[\"DONE\"] = \"DONE\";\n})(Categories || (Categories = {}));\n\nexport const categoryState = atom({\n  key: \"category\",\n  default: Categories.TODO\n});\nexport const toDoState = atom({\n  key: \"toDo\",\n  default: []\n});\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: _ref => {\n    let {\n      get\n    } = _ref;\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter(toDo => toDo.category === category);\n  }\n});","map":{"version":3,"sources":["/Users/leegihun/Documents/JS_Practice/ToDoList/src/atoms.ts"],"names":["atom","selector","Categories","categoryState","key","default","TODO","toDoState","toDoSelector","get","toDos","category","filter","toDo"],"mappings":"AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,QAA/B;AAGA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAYZ,OAAO,MAAMC,aAAa,GAAGH,IAAI,CAAa;AAC5CI,EAAAA,GAAG,EAAE,UADuC;AAE5CC,EAAAA,OAAO,EAAEH,UAAU,CAACI;AAFwB,CAAb,CAA1B;AAKP,OAAO,MAAMC,SAAS,GAAGP,IAAI,CAAU;AACrCI,EAAAA,GAAG,EAAE,MADgC;AAErCC,EAAAA,OAAO,EAAE;AAF4B,CAAV,CAAtB;AAKP,OAAO,MAAMG,YAAY,GAAGP,QAAQ,CAAC;AACnCG,EAAAA,GAAG,EAAE,cAD8B;AAEnCK,EAAAA,GAAG,EAAE,QAAa;AAAA,QAAZ;AAAEA,MAAAA;AAAF,KAAY;AAChB,UAAMC,KAAK,GAAGD,GAAG,CAACF,SAAD,CAAjB;AACA,UAAMI,QAAQ,GAAGF,GAAG,CAACN,aAAD,CAApB;AACA,WAAOO,KAAK,CAACE,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACF,QAAL,KAAkBA,QAAzC,CAAP;AACD;AANkC,CAAD,CAA7B","sourcesContent":["import { atom, selector } from \"recoil\";\n\ntype categories = \"DONE\" | \"DOING\" | \"TODO\";\nexport enum Categories {\n  \"TODO\" = \"TODO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TODO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}