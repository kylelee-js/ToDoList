{"ast":null,"code":"var _jsxFileName = \"/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateToDo() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setValue\n  } = useForm();\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  useEffect(() => {\n    localStorage.setItem(\"storedToDo\", JSON.stringify(toDos));\n  }, [toDos]);\n\n  const onValid = TODOS => {\n    setToDos(prev => [{\n      text: TODOS.toDo,\n      id: Date.now(),\n      category\n    }, ...prev]); // setCategory를 통해 커스텀 카테고리 입력\n    // if (TODOS.customCategory !== \"\") {\n    //   setCustomCategory((prev) => [TODOS.customCategory + \"\", ...prev]);\n    // }\n    // hook-form의 객체 중  \"toDo\" 프로퍼티의 값을 변경\n\n    setValue(\"toDo\", \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onValid),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"What to do?\",\n        ...register(\"toDo\", {\n          required: true,\n          minLength: {\n            value: 5,\n            message: \"too short\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CreateToDo, \"WZpZw9yaKd5TLL9I6jOUG0WBFes=\", false, function () {\n  return [useForm, useRecoilState, useRecoilValue];\n});\n\n_c = CreateToDo;\nexport default CreateToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateToDo\");","map":{"version":3,"sources":["/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx"],"names":["useEffect","useForm","useRecoilState","useRecoilValue","categoryState","toDoState","CreateToDo","register","handleSubmit","setValue","toDos","setToDos","category","localStorage","setItem","JSON","stringify","onValid","TODOS","prev","text","toDo","id","Date","now","required","minLength","value","message"],"mappings":";;;AAAA,SAASA,SAAT,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAAkE,QAAlE;AACA,SAASC,aAAT,EAA6CC,SAA7C,QAA8D,UAA9D;;;;AAMA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAuCR,OAAO,EAApD;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBT,cAAc,CAACG,SAAD,CAAxC;AACA,QAAMO,QAAQ,GAAGT,cAAc,CAACC,aAAD,CAA/B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAnC;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,QAAMO,OAAO,GAAIC,KAAD,IAAkB;AAChCP,IAAAA,QAAQ,CAAEQ,IAAD,IAAU,CACjB;AACEC,MAAAA,IAAI,EAAEF,KAAK,CAACG,IADd;AAEEC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFN;AAGEZ,MAAAA;AAHF,KADiB,EAMjB,GAAGO,IANc,CAAX,CAAR,CADgC,CAShC;AACA;AACA;AACA;AAEA;;AACAV,IAAAA,QAAQ,CAAC,MAAD,EAAS,EAAT,CAAR;AACD,GAhBD;;AAkBA,sBACE;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAED,YAAY,CAACS,OAAD,CAA5B;AAAA,8BACE;AACE,QAAA,WAAW,EAAC,aADd;AAAA,WAEMV,QAAQ,CAAC,MAAD,EAAS;AACnBkB,UAAAA,QAAQ,EAAE,IADS;AAEnBC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE,CAAT;AAAYC,YAAAA,OAAO,EAAE;AAArB;AAFQ,SAAT;AAFd;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD;;GAzCQtB,U;UACsCL,O,EACnBC,c,EACTC,c;;;KAHVG,U;AA2CT,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, customCategoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n  category: string;\n}\nfunction CreateToDo() {\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n\n  useEffect(() => {\n    localStorage.setItem(\"storedToDo\", JSON.stringify(toDos));\n  }, [toDos]);\n\n  const onValid = (TODOS: IForm) => {\n    setToDos((prev) => [\n      {\n        text: TODOS.toDo,\n        id: Date.now(),\n        category,\n      },\n      ...prev,\n    ]);\n    // setCategory를 통해 커스텀 카테고리 입력\n    // if (TODOS.customCategory !== \"\") {\n    //   setCustomCategory((prev) => [TODOS.customCategory + \"\", ...prev]);\n    // }\n\n    // hook-form의 객체 중  \"toDo\" 프로퍼티의 값을 변경\n    setValue(\"toDo\", \"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onValid)}>\n        <input\n          placeholder=\"What to do?\"\n          {...register(\"toDo\", {\n            required: true,\n            minLength: { value: 5, message: \"too short\" },\n          })}\n        />\n        <button>Add</button>\n      </form>\n    </>\n  );\n}\n\nexport default CreateToDo;\n"]},"metadata":{},"sourceType":"module"}