{"ast":null,"code":"var _jsxFileName = \"/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { toDoState } from \"../atoms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateToDo() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setValue\n  } = useForm();\n  const setToDos = useSetRecoilState(toDoState); // const [category, setCategory] = useRecoilState(categoryState);\n\n  const onValid = _ref => {\n    let {\n      toDo,\n      category\n    } = _ref;\n    setToDos(prev => [{\n      text: toDo,\n      id: Date.now(),\n      category: category\n    }, ...prev]); // hook-form의 객체 중  \"toDo\" 프로퍼티의 값을 변경\n\n    setValue(\"toDo\", \"\");\n    setValue(\"category\", \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onValid),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"What to do?\",\n        ...register(\"toDo\", {\n          required: true,\n          minLength: {\n            value: 5,\n            message: \"too short\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"New Category\",\n        ...register(\"category\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CreateToDo, \"CHDI+DkFOG+rhY0GiebDsRhmbl0=\", false, function () {\n  return [useForm, useSetRecoilState];\n});\n\n_c = CreateToDo;\nexport default CreateToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateToDo\");","map":{"version":3,"sources":["/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx"],"names":["useForm","useSetRecoilState","toDoState","CreateToDo","register","handleSubmit","setValue","setToDos","onValid","toDo","category","prev","text","id","Date","now","required","minLength","value","message"],"mappings":";;;AACA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAAyCC,iBAAzC,QAAkE,QAAlE;AACA,SAAwBC,SAAxB,QAAyC,UAAzC;;;;AAMA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAuCN,OAAO,EAApD;AACA,QAAMO,QAAQ,GAAGN,iBAAiB,CAACC,SAAD,CAAlC,CAFoB,CAGpB;;AAEA,QAAMM,OAAO,GAAG,QAA+B;AAAA,QAA9B;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA8B;AAC7CH,IAAAA,QAAQ,CAAEI,IAAD,IAAU,CACjB;AAAEC,MAAAA,IAAI,EAAEH,IAAR;AAAcI,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAAlB;AAA8BL,MAAAA,QAAQ,EAAEA;AAAxC,KADiB,EAEjB,GAAGC,IAFc,CAAX,CAAR,CAD6C,CAK7C;;AACAL,IAAAA,QAAQ,CAAC,MAAD,EAAS,EAAT,CAAR;AACAA,IAAAA,QAAQ,CAAC,UAAD,EAAa,EAAb,CAAR;AACD,GARD;;AASA,sBACE;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAED,YAAY,CAACG,OAAD,CAA5B;AAAA,8BACE;AACE,QAAA,WAAW,EAAC,aADd;AAAA,WAEMJ,QAAQ,CAAC,MAAD,EAAS;AACnBY,UAAAA,QAAQ,EAAE,IADS;AAEnBC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE,CAAT;AAAYC,YAAAA,OAAO,EAAE;AAArB;AAFQ,SAAT;AAFd;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAO,QAAA,WAAW,EAAC,cAAnB;AAAA,WAAsCf,QAAQ,CAAC,UAAD;AAA9C;AAAA;AAAA;AAAA;AAAA,cARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeD;;GA7BQD,U;UACsCH,O,EAC5BC,iB;;;KAFVE,U;AA+BT,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n  category: string;\n}\nfunction CreateToDo() {\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const setToDos = useSetRecoilState(toDoState);\n  // const [category, setCategory] = useRecoilState(categoryState);\n\n  const onValid = ({ toDo, category }: IForm) => {\n    setToDos((prev) => [\n      { text: toDo, id: Date.now(), category: category },\n      ...prev,\n    ]);\n    // hook-form의 객체 중  \"toDo\" 프로퍼티의 값을 변경\n    setValue(\"toDo\", \"\");\n    setValue(\"category\", \"\");\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit(onValid)}>\n        <input\n          placeholder=\"What to do?\"\n          {...register(\"toDo\", {\n            required: true,\n            minLength: { value: 5, message: \"too short\" },\n          })}\n        />\n        <input placeholder=\"New Category\" {...register(\"category\")} />\n        <button>Add</button>\n      </form>\n    </>\n  );\n}\n\nexport default CreateToDo;\n"]},"metadata":{},"sourceType":"module"}