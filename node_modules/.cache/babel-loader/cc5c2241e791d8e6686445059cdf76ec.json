{"ast":null,"code":"import _objectSpread from\"/Users/leegihun/Documents/JS_Practice/ToDoList/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/leegihun/Documents/JS_Practice/ToDoList/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect}from\"react\";import{useRecoilState,useRecoilValue}from\"recoil\";import{toDoState,toDoSelector,categoryState,Categories}from\"../atoms\";import CreateToDo from\"./CreateToDo\";import ToDo from\"./ToDo\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ToDoList(){var _useRecoilState=useRecoilState(toDoState),_useRecoilState2=_slicedToArray(_useRecoilState,2),toDos=_useRecoilState2[0],setToDos=_useRecoilState2[1];var TODOS=useRecoilValue(toDoSelector);var _useRecoilState3=useRecoilState(categoryState),_useRecoilState4=_slicedToArray(_useRecoilState3,2),category=_useRecoilState4[0],setCategory=_useRecoilState4[1];useEffect(function(){if(toDos.length===0){var storedToDo=localStorage.getItem(\"storedToDo\");var loadedToDo=JSON.parse(storedToDo);setToDos(loadedToDo);}},[]);var onInput=function onInput(event){setCategory(event.currentTarget.value);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"To Dos\"}),/*#__PURE__*/_jsxs(\"select\",{value:category,onInput:onInput,children:[/*#__PURE__*/_jsx(\"option\",{value:Categories.TODO,children:Categories.TODO}),/*#__PURE__*/_jsx(\"option\",{value:Categories.DOING,children:Categories.DOING}),/*#__PURE__*/_jsx(\"option\",{value:Categories.DONE,children:Categories.DONE})]}),/*#__PURE__*/_jsx(CreateToDo,{}),/*#__PURE__*/_jsx(\"ul\",{children:TODOS&&TODOS.map(function(toDo){return/*#__PURE__*/_jsx(ToDo,_objectSpread({},toDo),toDo.id);})})]});}export default ToDoList;","map":{"version":3,"sources":["/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/ToDoList.tsx"],"names":["React","useEffect","useRecoilState","useRecoilValue","toDoState","toDoSelector","categoryState","Categories","CreateToDo","ToDo","ToDoList","toDos","setToDos","TODOS","category","setCategory","length","storedToDo","localStorage","getItem","loadedToDo","JSON","parse","onInput","event","currentTarget","value","TODO","DOING","DONE","map","toDo","id"],"mappings":"uQAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAA2C,OAA3C,CAEA,OAEEC,cAFF,CAGEC,cAHF,KAKO,QALP,CAMA,OAASC,SAAT,CAAoBC,YAApB,CAAkCC,aAAlC,CAAiDC,UAAjD,KAAmE,UAAnE,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,wFAEA,QAASC,CAAAA,QAAT,EAAoB,CAClB,oBAA0BR,cAAc,CAACE,SAAD,CAAxC,oDAAOO,KAAP,qBAAcC,QAAd,qBACA,GAAMC,CAAAA,KAAK,CAAGV,cAAc,CAACE,YAAD,CAA5B,CACA,qBAAgCH,cAAc,CAACI,aAAD,CAA9C,qDAAOQ,QAAP,qBAAiBC,WAAjB,qBACAd,SAAS,CAAC,UAAM,CACd,GAAIU,KAAK,CAACK,MAAN,GAAiB,CAArB,CAAwB,CACtB,GAAMC,CAAAA,UAAU,CAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAnB,CACA,GAAMC,CAAAA,UAAU,CAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAnB,CACAL,QAAQ,CAACQ,UAAD,CAAR,CACD,CACF,CANQ,CAMN,EANM,CAAT,CAOA,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAA+C,CAC7DT,WAAW,CAACS,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAX,CACD,CAFD,CAGA,mBACE,oCACE,8BADF,cAEE,gBAAQ,KAAK,CAAEZ,QAAf,CAAyB,OAAO,CAAES,OAAlC,wBACE,eAAQ,KAAK,CAAEhB,UAAU,CAACoB,IAA1B,UAAiCpB,UAAU,CAACoB,IAA5C,EADF,cAEE,eAAQ,KAAK,CAAEpB,UAAU,CAACqB,KAA1B,UAAkCrB,UAAU,CAACqB,KAA7C,EAFF,cAGE,eAAQ,KAAK,CAAErB,UAAU,CAACsB,IAA1B,UAAiCtB,UAAU,CAACsB,IAA5C,EAHF,GAFF,cAOE,KAAC,UAAD,IAPF,cAQE,oBAAKhB,KAAK,EAAIA,KAAK,CAACiB,GAAN,CAAU,SAACC,IAAD,qBAAU,KAAC,IAAD,kBAAwBA,IAAxB,EAAWA,IAAI,CAACC,EAAhB,CAAV,EAAV,CAAd,EARF,GADF,CAYD,CAED,cAAetB,CAAAA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  atom,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { toDoState, toDoSelector, categoryState, Categories } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const TODOS = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  useEffect(() => {\n    if (toDos.length === 0) {\n      const storedToDo = localStorage.getItem(\"storedToDo\");\n      const loadedToDo = JSON.parse(storedToDo as string);\n      setToDos(loadedToDo);\n    }\n  }, []);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TODO}>{Categories.TODO}</option>\n        <option value={Categories.DOING}>{Categories.DOING}</option>\n        <option value={Categories.DONE}>{Categories.DONE}</option>\n      </select>\n      <CreateToDo />\n      <ul>{TODOS && TODOS.map((toDo) => <ToDo key={toDo.id} {...toDo} />)}</ul>\n    </div>\n  );\n}\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}