[{"/Users/leegihun/Documents/JS_Practice/ToDoList/src/index.tsx":"1","/Users/leegihun/Documents/JS_Practice/ToDoList/src/theme.ts":"2","/Users/leegihun/Documents/JS_Practice/ToDoList/src/App.tsx":"3","/Users/leegihun/Documents/JS_Practice/ToDoList/src/GlobalStyle.ts":"4","/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/ToDoList.tsx":"5","/Users/leegihun/Documents/JS_Practice/ToDoList/src/atoms.ts":"6","/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx":"7","/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/ToDo.tsx":"8"},{"size":424,"mtime":1646608447000,"results":"9","hashOfConfig":"10"},{"size":185,"mtime":1646608540000,"results":"11","hashOfConfig":"10"},{"size":200,"mtime":1646634880000,"results":"12","hashOfConfig":"10"},{"size":427,"mtime":1646275358000,"results":"13","hashOfConfig":"10"},{"size":1314,"mtime":1646846973164,"results":"14","hashOfConfig":"10"},{"size":1064,"mtime":1646846009599,"results":"15","hashOfConfig":"10"},{"size":1658,"mtime":1646846047296,"results":"16","hashOfConfig":"10"},{"size":1816,"mtime":1646846880492,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aai2l4",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},"/Users/leegihun/Documents/JS_Practice/ToDoList/src/index.tsx",[],[],"/Users/leegihun/Documents/JS_Practice/ToDoList/src/theme.ts",[],[],"/Users/leegihun/Documents/JS_Practice/ToDoList/src/App.tsx",[],[],"/Users/leegihun/Documents/JS_Practice/ToDoList/src/GlobalStyle.ts",[],[],"/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/ToDoList.tsx",["47","48","49","50","51"],[],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  atom,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { toDoState, toDoSelector, categoryState, Categories } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const TODOS = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  useEffect(() => {\n    if (toDos.length === 0) {\n      const storedToDo = localStorage.getItem(\"storedToDo\");\n      const loadedToDo = JSON.parse(storedToDo as string);\n      setToDos(loadedToDo);\n    }\n  }, []);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TODO}>{Categories.TODO}</option>\n        <option value={Categories.DOING}>{Categories.DOING}</option>\n        <option value={Categories.DONE}>{Categories.DONE}</option>\n      </select>\n      <CreateToDo />\n      <ul>{TODOS && TODOS.map((toDo) => <ToDo key={toDo.id} {...toDo} />)}</ul>\n    </div>\n  );\n}\n\nexport default ToDoList;\n","/Users/leegihun/Documents/JS_Practice/ToDoList/src/atoms.ts",["52","53"],[],"import { atom, selector } from \"recoil\";\n\nconst storedToDo = localStorage.getItem(\"storedToDo\");\nconst loadedToDo = JSON.parse(storedToDo as string);\n\ntype categories = \"DONE\" | \"DOING\" | \"TODO\";\nexport enum Categories {\n  \"TODO\" = \"TODO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n  customCategory?: string;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TODO,\n});\n\nexport const customCategoryState = atom<string[]>({\n  key: \"customCategory\",\n  default: [],\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: loadedToDo || [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n\nexport const categorySelector = selector({\n  key: \"categorySelector\",\n  get: ({ get }) => {\n    const cate = get(categoryState);\n    return [];\n  },\n});\n",["54","55"],"/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/CreateToDo.tsx",["56","57","58"],[],"import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, customCategoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n  category: string;\n  customCategory?: string;\n}\nfunction CreateToDo() {\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const [customCategoryArr, setCustomCategory] =\n    useRecoilState(customCategoryState);\n\n  useEffect(() => {\n    localStorage.setItem(\"storedToDo\", JSON.stringify(toDos));\n  }, [toDos]);\n\n  const onValid = (TODOS: IForm) => {\n    setToDos((prev) => [\n      {\n        text: TODOS.toDo,\n        id: Date.now(),\n        category,\n        customCategory: TODOS.customCategory,\n      },\n      ...prev,\n    ]);\n    // setCategory를 통해 커스텀 카테고리 입력\n    if (TODOS.customCategory !== \"\") {\n      setCustomCategory((prev) => [TODOS.customCategory + \"\", ...prev]);\n    }\n\n    // hook-form의 객체 중  \"toDo\" 프로퍼티의 값을 변경\n    setValue(\"toDo\", \"\");\n    setValue(\"category\", \"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onValid)}>\n        <input\n          placeholder=\"What to do?\"\n          {...register(\"toDo\", {\n            required: true,\n            minLength: { value: 5, message: \"too short\" },\n          })}\n        />\n        <input placeholder=\"Custom Category\" {...register(\"customCategory\")} />\n        <button>Add</button>\n      </form>\n    </>\n  );\n}\n\nexport default CreateToDo;\n","/Users/leegihun/Documents/JS_Practice/ToDoList/src/components/ToDo.tsx",["59","60","61","62"],[],"import React from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, customCategoryState, IToDo, toDoState } from \"../atoms\";\n\nconst CustomCategory = styled.button`\n  border-radius: 50%;\n  background-color: whitesmoke;\n`;\n\nfunction ToDo({ text, category, id, customCategory }: IToDo) {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((prev) => {\n      const index = prev.findIndex((toDo) => toDo.id === id);\n\n      const front = prev.slice(0, index);\n      const back = prev.slice(index + 1);\n      const newToDo = { text, id, category: name as any, customCategory };\n      const newArr = [...front, newToDo, ...back];\n      return newArr;\n    });\n  };\n\n  const onDelete = () => {\n    setToDos((prev) => {\n      const targetIndex = prev.findIndex((toDo) => toDo.id === id);\n      const copyToDos = [...prev];\n      copyToDos.splice(targetIndex, 1);\n      return copyToDos;\n    });\n  };\n  return (\n    <>\n      <li>\n        <span>* {text}</span>\n        {category !== Categories.DOING && (\n          <button name={Categories.DOING} onClick={onClick}>\n            Doing\n          </button>\n        )}\n        {category !== Categories.TODO && (\n          <button name={Categories.TODO} onClick={onClick}>\n            To Do\n          </button>\n        )}\n        {category !== Categories.DONE && (\n          <button name={Categories.DONE} onClick={onClick}>\n            Done\n          </button>\n        )}\n        {customCategory && <CustomCategory>{customCategory}</CustomCategory>}\n        <button onClick={onDelete}>X</button>\n      </li>\n    </>\n  );\n}\n\nexport default ToDo;\n",{"ruleId":"63","severity":1,"message":"64","line":1,"column":28,"nodeType":"65","messageId":"66","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"67","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":17},{"ruleId":"63","severity":1,"message":"68","line":4,"column":3,"nodeType":"65","messageId":"66","endLine":4,"endColumn":7},{"ruleId":"63","severity":1,"message":"69","line":7,"column":3,"nodeType":"65","messageId":"66","endLine":7,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":23,"column":6,"nodeType":"72","endLine":23,"endColumn":8,"suggestions":"73"},{"ruleId":"63","severity":1,"message":"74","line":6,"column":6,"nodeType":"65","messageId":"66","endLine":6,"endColumn":16},{"ruleId":"63","severity":1,"message":"75","line":47,"column":11,"nodeType":"65","messageId":"66","endLine":47,"endColumn":15},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":21,"nodeType":"65","messageId":"66","endLine":1,"endColumn":29},{"ruleId":"63","severity":1,"message":"69","line":3,"column":42,"nodeType":"65","messageId":"66","endLine":3,"endColumn":59},{"ruleId":"63","severity":1,"message":"80","line":15,"column":10,"nodeType":"65","messageId":"66","endLine":15,"endColumn":27},{"ruleId":"63","severity":1,"message":"81","line":2,"column":26,"nodeType":"65","messageId":"66","endLine":2,"endColumn":40},{"ruleId":"63","severity":1,"message":"69","line":2,"column":42,"nodeType":"65","messageId":"66","endLine":2,"endColumn":59},{"ruleId":"63","severity":1,"message":"82","line":4,"column":22,"nodeType":"65","messageId":"66","endLine":4,"endColumn":41},{"ruleId":"63","severity":1,"message":"83","line":12,"column":10,"nodeType":"65","messageId":"66","endLine":12,"endColumn":15},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'atom' is defined but never used.","'useSetRecoilState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setToDos' and 'toDos.length'. Either include them or remove the dependency array.","ArrayExpression",["84"],"'categories' is defined but never used.","'cate' is assigned a value but never used.","no-native-reassign",["85"],"no-negated-in-lhs",["86"],"'customCategoryArr' is assigned a value but never used.","'useRecoilValue' is defined but never used.","'customCategoryState' is defined but never used.","'toDos' is assigned a value but never used.",{"desc":"87","fix":"88"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [setToDos, toDos.length]",{"range":"89","text":"90"},[729,731],"[setToDos, toDos.length]"]